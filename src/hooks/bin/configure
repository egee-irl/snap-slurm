#!/usr/bin/env python3
import os
import sys
import shutil
import subprocess

from pathlib import Path
from time import sleep

LD_LIBRARY_PATH = \
    f"{os.environ['SNAP']}/usr/share/gdb/auto-load/lib/x86_64-linux-gnu/"\
    ":"\
    f"{os.environ['SNAP']}/lib/x86_64-linux-gnu/"

os.environ['LD_LIBRARY_PATH'] = LD_LIBRARY_PATH


SNAP_MODE_PROCESS_MAP = {
    "slurmdbd": ["munged", "slurmdbd", "mysql"],
    "slurmctld": ["munged", "slurmctld"],
    "slurmd": ["munged", "slurmd"],
    "slurmrestd": ["munged", "slurmrestd"],
    "login": [],
    "all": [
        "munged",
        "mysql",
        "slurmdbd",
        "slurmctld",
        "slurmd",
        "slurmrestd",
    ],
    "none": [],
}


def snap_mode_supported(snap_mode):
    if snap_mode is not None and \
       snap_mode in SNAP_MODE_PROCESS_MAP.keys():
        return True
    return False


def snapctl_get(snap_config_value):
    """Get snap config from snapctl.

    Return python None if snapctl returns the empty string.
    """

    snapctl_out = subprocess.check_output(
        ["snapctl", "get", snap_config_value]
    ).decode().rstrip()

    if snapctl_out == "":
        snapctl_out = None

    return snapctl_out


def snapctl_set(snap_config_value):
    subprocess.check_output(
        ["snapctl", "set", snap_config_value]
    )


def run_bash(bash_string):
    return subprocess.check_output(
        bash_string.split()
    ).decode().rstrip()


def configure_munge(munge_key_from_snap_config):

    munge_key_path = Path(f"{os.environ['SNAP_COMMON']}/etc/munge/munge.key")

    # Define the events surrounding the configuration of the munge.key snap
    # config.
    #
    # If the snap config for the munge.key is set AND there is an existing
    # munge key in $SNAP_COMMON/etc/munge/munge.key, write the munge key
    # obtained from snapctl to the path and stop/start munged.
    # If the munge key in $SNAP_COMMON/etc/munge/munge.key and the key
    # obtained from snapctl get are identical, return.
    if munge_key_path.exists() and munge_key_from_snap_config is not None:
        if munge_key_path.read_text() != munge_key_from_snap_config:
            munge_key_path.chmod(0o700)
            munge_key_path.write_text(munge_key_from_snap_config)
        else:
            return
    # If the munge.key is not defined as a snap config AND the
    # $SNAP_COMMON/etc/munge/munge.key file does not exist, generate
    # a munge key and write it to the file.
    elif not munge_key_path.exists() and munge_key_from_snap_config is None:
        munge_key_path.write_bytes(os.urandom(1024))
    # Alas, if the munge.key is defined and the munge key file does not exist,
    # write the snap munge.key config to the munge key file.
    elif not munge_key_path.exists() and \
            munge_key_from_snap_config is not None:
        munge_key_path.write_text(munge_key_from_snap_config)
    else:
        return

    # Set perms to 0400
    munge_key_path.chmod(0o400)


def configure_snap_mode(snap_mode_from_snap_config):
    snap_mode_path = Path(f"{os.environ['SNAP_COMMON']}/snap_mode")

    # If the snap.mode has changed AND is different then what we have
    # on disk:
    #     - stop all running processes
    #     - start only the processes which are supported by the snap.mode
    if snap_mode_supported(snap_mode_from_snap_config) and\
            snap_mode_path.read_text() != snap_mode_from_snap_config:

        # Write out the new snap mode
        snap_mode_path.write_text(snap_mode_from_snap_config)

        # Render appropriate slurm config files
        #
        # slurmdbd.conf for slurmdbd
        # slurm.conf for any other snap.mode configuration
        slurm_configs = []
        # Find out what config files we need to write
        if snap_mode_from_snap_config == "none":
            pass
        elif snap_mode_from_snap_config == "all":
            slurm_configs.append("slurm")
            slurm_configs.append("slurmdbd")
        elif snap_mode_from_snap_config == "slurmdbd":
            slurm_configs.append("slurmdbd")
        else:
            slurm_configs.append("slurm")
        # Write the slurm config files
        for config in slurm_configs:
            out = subprocess.check_output([
                f"{os.environ['SNAP']}/bin/slurm-configurator",
                "-t",
                config,
            ]).decode().rstrip()
            slurm_conf_file = Path(
                f"{os.environ['SNAP_COMMON']}/etc/slurm/{config}.conf"
            )
            slurm_conf_file.write_text(out)
            slurm_conf_file.chmod(0o777)


def daemon_starter(snap_mode):
    # Grab processes to start
    snapped_processes = SNAP_MODE_PROCESS_MAP[snap_mode]

    # Start the processes used by the newly configured snap mode,
    # throw exception and exit with error code 1 if we cannot start
    # the process.
    for snapped_process in snapped_processes:
        try:
            process = f"{os.environ['SNAP_INSTANCE_NAME']}.{snapped_process}"
            run_bash(f"snapctl start {process}")
            sleep(1)
        except Exception:
            sys.exit(1)


def stop_all_daemons():
    """Stop all daemons that could be running in this snap
    prior to running the other configure functions.
    """

    daemons = [
        f"{os.environ['SNAP_INSTANCE_NAME']}.munged",
        f"{os.environ['SNAP_INSTANCE_NAME']}.mysql",
        f"{os.environ['SNAP_INSTANCE_NAME']}.slurmdbd",
        f"{os.environ['SNAP_INSTANCE_NAME']}.slurmctld",
        f"{os.environ['SNAP_INSTANCE_NAME']}.slurmd",
    ]
    for daemon in daemons:
        try:
            run_bash(f"snapctl stop {daemon}")
        except Exception:
            pass


if __name__ == "__main__":
    snap_mode = snapctl_get("snap.mode")
    munge_key = snapctl_get("munge.key")

    stop_all_daemons()

    configure_munge(munge_key)
    configure_snap_mode(snap_mode)

    daemon_starter(snap_mode)
